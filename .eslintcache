[{"/home/codesammy/Documents/learn-react/reddit-clone/src/index.js":"1","/home/codesammy/Documents/learn-react/reddit-clone/src/reportWebVitals.js":"2","/home/codesammy/Documents/learn-react/reddit-clone/src/app.js":"3","/home/codesammy/Documents/learn-react/reddit-clone/src/components/post.js":"4","/home/codesammy/Documents/learn-react/reddit-clone/src/lib/firebase.js":"5","/home/codesammy/Documents/learn-react/reddit-clone/src/components/navbar.js":"6","/home/codesammy/Documents/learn-react/reddit-clone/src/components/add-new-post.js":"7","/home/codesammy/Documents/learn-react/reddit-clone/src/components/vote-buttons.js":"8"},{"size":573,"mtime":1608921229603,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1608498050173,"results":"11","hashOfConfig":"10"},{"size":1576,"mtime":1608932141177,"results":"12","hashOfConfig":"10"},{"size":435,"mtime":1608932897437,"results":"13","hashOfConfig":"10"},{"size":677,"mtime":1608501166287,"results":"14","hashOfConfig":"10"},{"size":491,"mtime":1608931203840,"results":"15","hashOfConfig":"10"},{"size":2463,"mtime":1608932818913,"results":"16","hashOfConfig":"10"},{"size":3857,"mtime":1608934250353,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1y7xkgs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/codesammy/Documents/learn-react/reddit-clone/src/index.js",[],["37","38"],"/home/codesammy/Documents/learn-react/reddit-clone/src/reportWebVitals.js",[],"/home/codesammy/Documents/learn-react/reddit-clone/src/app.js",["39","40"],"// chakra imports\n\nimport { Container, Flex, Spinner, VStack } from '@chakra-ui/core'\n\nimport React, { useState, useEffect } from 'react'\nimport Post from './components/post'\nimport Navbar from './components/navbar'\nimport db from './lib/firebase'\n\nfunction App() {\n  // intialise the post state to an empty array\n\n  const [posts, setPosts] = useState([])\n\n  useEffect(() => {\n    // Hook to handle the initial fetching of posts\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .get()\n      .then((querySnapshot) => {\n        const data = querySnapshot.docs.map((doc) => ({\n          id: doc.id,\n          ...doc.data()\n        }))\n        setPosts(data)\n\n      })\n  }, [])\n\n\n  useEffect(() => {\n    // Hook to handle the real-time updating of posts whenever there is a\n    // change in the datastore (https://firebase.google.com/docs/firestore/query-data/listen#view_changes_between_snapshots)\n\n    db.collection(\"posts\")\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot((querySnapshot) => {\n        const _posts = [];\n\n        querySnapshot.forEach((doc) => {\n          _posts.push({\n            id: doc.id,\n            ...doc.data(),\n          });\n        });\n\n        setPosts(_posts);\n      });\n  }, []);\n  return (\n    // use fragments\n    <>\n      <Navbar />\n      <Container maxW=\"md\" centerContent p={8}>\n        <VStack spacing={8} w=\"100%\">\n          {\n            posts.map((post) => (\n              <Post post={post} key={post.id} />\n            ))\n          }\n        </VStack>\n\n      </Container>\n    </>\n\n  );\n}\n\n\nexport default App;\n","/home/codesammy/Documents/learn-react/reddit-clone/src/components/post.js",[],"/home/codesammy/Documents/learn-react/reddit-clone/src/lib/firebase.js",[],"/home/codesammy/Documents/learn-react/reddit-clone/src/components/navbar.js",[],"/home/codesammy/Documents/learn-react/reddit-clone/src/components/add-new-post.js",["41","42"],"import {\n    Button,\n    FormControl,\n    FormLabel,\n    Textarea,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    HStack,\n    useDisclosure,\n} from \"@chakra-ui/core\";\nimport React, { useState, useEffect } from 'react';\nimport db from \"../lib/firebase\";\n\n\nfunction AddNewPost() {\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const [title, setTitle] = useState(\"\");\n    const [isSaving, setSaving] = useState(false);\n\n    const handleSubmit = async () => {\n        const date = new Date();\n\n        await db.collection(\"posts\").add({\n            title,\n            upVotesCount: 0,\n            downVotesCount: 0,\n            createdAt: date.toUTCString(),\n            updatedAt: date.toUTCString(),\n        });\n\n        onClose();\n        setTitle(\"\");\n    };\n\n    return (\n        <>\n            <Button onClick={onOpen} colorScheme=\"blue\">\n                Add new post\n      </Button>\n\n            <Modal onClose={onClose} isOpen={isOpen} isCentered>\n                <ModalOverlay>\n                    <ModalContent>\n                        <ModalHeader>Add new post</ModalHeader>\n                        <ModalCloseButton />\n                        <ModalBody>\n                            <FormControl id=\"post-title\">\n                                <FormLabel>Post title</FormLabel>\n                                <Textarea\n                                    type=\"post-title\"\n                                    value={title}\n                                    onChange={(e) => setTitle(e.target.value)}\n                                />\n                            </FormControl>\n                        </ModalBody>\n                        <ModalFooter>\n                            <HStack spacing={4}>\n                                <Button onClick={onClose}>Close</Button>\n                                <Button\n                                    onClick={handleSubmit}\n                                    colorScheme=\"blue\"\n                                    disabled={!title.trim()}\n                                    isLoading={isSaving}\n                                >\n                                    Save\n                </Button>\n                            </HStack>\n                        </ModalFooter>\n                    </ModalContent>\n                </ModalOverlay>\n            </Modal>\n        </>\n    )\n}\n\nexport default AddNewPost\n","/home/codesammy/Documents/learn-react/reddit-clone/src/components/vote-buttons.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":3,"column":21,"nodeType":"49","messageId":"50","endLine":3,"endColumn":25},{"ruleId":"47","severity":1,"message":"51","line":3,"column":27,"nodeType":"49","messageId":"50","endLine":3,"endColumn":34},{"ruleId":"47","severity":1,"message":"52","line":16,"column":27,"nodeType":"49","messageId":"50","endLine":16,"endColumn":36},{"ruleId":"47","severity":1,"message":"53","line":23,"column":22,"nodeType":"49","messageId":"50","endLine":23,"endColumn":31},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Flex' is defined but never used.","Identifier","unusedVar","'Spinner' is defined but never used.","'useEffect' is defined but never used.","'setSaving' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]